/**
 * @author Emilie Wirbel
 *
 * \section Description
 * This file was generated by Aldebaran Robotics ModuleGenerator
 */

#include <signal.h>
#include <boost/shared_ptr.hpp>
#include <alcommon/albroker.h>
#include <alcommon/almodule.h>
#include <alcommon/albrokermanager.h>
#include <alcommon/altoolsmain.h>

#include "lib_1.h"


#ifdef LIB_1_IS_REMOTE
# define ALCALL
#else
# ifdef _WIN32
#  define ALCALL __declspec(dllexport)
# else
#define ALCALL
#endif
#endif

/**
 First of all you need to create a broker,
 then you must add your new broker into the NAOqiâ€™s broker manager.
 Then you can create your custom module and link it
 with the new broker you have just created.
  */

extern "C"
{           //entry point
  ALCALL int _createModule(boost::shared_ptr<AL::ALBroker> pBroker)
  {
    // init broker with the main broker instance
    // from the parent executable
       // Deal with ALBrokerManager singleton (add your borker into NAOqi)
    AL::ALBrokerManager::setInstance(pBroker->fBrokerManager.lock());
    AL::ALBrokerManager::getInstance()->addBroker(pBroker);



    // Now it's time to load your module with
    // AL::ALModule::createModule<your_module>(<broker_create>, <your_module>);
    AL::ALModule::createModule<Lib_1>( pBroker, "Lib_1" );

    return 0;
  }
        //exit point
  ALCALL int _closeModule()
  {
    return 0;
  }
}

#ifdef LIB_1_IS_REMOTE
  int main(int argc, char *argv[])
  {
    // pointer to createModule
    TMainType sig;
    sig = &_createModule;
    // call main
    ALTools::mainFunction("lib_1", argc, argv, sig);
  }
#endif

